"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(e){"object"==("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):self.cssVars=e()}(function(){function x(){return(x=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n,r=arguments[t];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}function C(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function p(e,t){var t=1<arguments.length&&void 0!==t?t:{},o={mimeType:t.mimeType||null,onBeforeSend:t.onBeforeSend||Function.prototype,onSuccess:t.onSuccess||Function.prototype,onError:t.onError||Function.prototype,onComplete:t.onComplete||Function.prototype},r=Array.isArray(e)?e:[e],s=Array.apply(null,Array(r.length)).map(function(e){return null});function a(e){return!("<"===(0<arguments.length&&void 0!==e?e:"").trim().charAt(0))}function c(e,t){o.onError(e,r[t],t)}function i(e,t){var n=o.onSuccess(e,r[t],t);s[t]=e=!1===n?"":n||e,-1===s.indexOf(null)&&o.onComplete(s)}var u=document.createElement("a");r.forEach(function(e,t){var n,r;u.setAttribute("href",e),u.href=String(u.href),Boolean(document.all&&!window.atob)&&u.host.split(":")[0]!==location.host.split(":")[0]?u.protocol===location.protocol?((n=new XDomainRequest).open("GET",e),n.timeout=0,n.onprogress=Function.prototype,n.ontimeout=Function.prototype,n.onload=function(){a(n.responseText)?i(n.responseText,t):c(n,t)},n.onerror=function(e){c(n,t)},setTimeout(function(){n.send()},0)):(console.warn("Internet Explorer 9 Cross-Origin (CORS) requests must use the same protocol (".concat(e,")")),c(null,t)):((r=new XMLHttpRequest).open("GET",e),o.mimeType&&r.overrideMimeType&&r.overrideMimeType(o.mimeType),o.onBeforeSend(r,e,t),r.onreadystatechange=function(){4===r.readyState&&(200===r.status&&a(r.responseText)?i(r.responseText,t):c(r,t))},r.send())})}function t(e){var s=/\/\*[\s\S]+?\*\//g,a=/(?:@import\s*)(?:url\(\s*)?(?:['"])([^'"]*)(?:['"])(?:\s*\))?(?:[^;]*;)/g,f={rootElement:e.rootElement||document,include:e.include||'style,link[rel="stylesheet"]',exclude:e.exclude||null,filter:e.filter||null,skipDisabled:!1!==e.skipDisabled,useCSSOM:e.useCSSOM||!1,onBeforeSend:e.onBeforeSend||Function.prototype,onSuccess:e.onSuccess||Function.prototype,onError:e.onError||Function.prototype,onComplete:e.onComplete||Function.prototype},t=Array.apply(null,f.rootElement.querySelectorAll(f.include)).filter(function(e){return t=f.exclude,!(e.matches||e.matchesSelector||e.webkitMatchesSelector||e.mozMatchesSelector||e.msMatchesSelector||e.oMatchesSelector).call(e,t);var t}),c=Array.apply(null,Array(t.length)).map(function(e){return null});function i(){var e;-1===c.indexOf(null)&&(e=c.join(""),f.onComplete(e,c,t))}function u(e,n,r,t){var o=f.onSuccess(e,r,t);!function r(o,s,a,c){var i=4<arguments.length&&void 0!==arguments[4]?arguments[4]:[],u=5<arguments.length&&void 0!==arguments[5]?arguments[5]:[],l=d(o,a,u);l.rules.length?p(l.absoluteUrls,{onBeforeSend:function(e,t,n){f.onBeforeSend(e,s,t)},onSuccess:function(n,e,t){var r=f.onSuccess(n,s,e),o=d(n=!1===r?"":r||n,e,u);return o.rules.forEach(function(e,t){n=n.replace(e,o.absoluteRules[t])}),n},onError:function(e,t,n){i.push({xhr:e,url:t}),u.push(l.rules[n]),r(o,s,a,c,i,u)},onComplete:function(e){e.forEach(function(e,t){o=o.replace(l.rules[t],e)}),r(o,s,a,c,i,u)}}):c(o,i)}(e=void 0!==o&&!1===Boolean(o)?"":o||e,r,t,function(e,t){null===c[n]&&(t.forEach(function(e){return f.onError(e.xhr,r,e.url)}),!f.filter||f.filter.test(e)?c[n]=e:c[n]="",i())})}function d(e,r,t){var n=2<arguments.length&&void 0!==t?t:[],o={};return o.rules=(e.replace(s,"").match(a)||[]).filter(function(e){return-1===n.indexOf(e)}),o.urls=o.rules.map(function(e){return e.replace(a,"$1")}),o.absoluteUrls=o.urls.map(function(e){return l(e,r)}),o.absoluteRules=o.rules.map(function(e,t){var n=o.urls[t],t=l(o.absoluteUrls[t],r);return e.replace(n,t)}),o}t.length?t.forEach(function(o,s){var a=o.getAttribute("href"),e=o.getAttribute("rel"),e="LINK"===o.nodeName&&a&&e&&-1!==e.toLowerCase().indexOf("stylesheet"),t=!1!==f.skipDisabled&&o.disabled,n="STYLE"===o.nodeName;e&&!t?p(a,{mimeType:"text/css",onBeforeSend:function(e,t,n){f.onBeforeSend(e,o,t)},onSuccess:function(e,t,n){var r=l(a);u(e,s,o,r)},onError:function(e,t,n){c[s]="",f.onError(e,o,t),i()}}):n&&!t?(e=o.textContent,u(e=f.useCSSOM?Array.apply(null,o.sheet.cssRules).map(function(e){return e.cssText}).join(""):e,s,o,location.href)):(c[s]="",i())}):f.onComplete("",[])}function l(e,t){var n=document.implementation.createHTMLDocument(""),r=n.createElement("base"),o=n.createElement("a");return n.head.appendChild(r),n.body.appendChild(o),r.href=t||document.baseURI||(document.querySelector("base")||{}).href||location.href,o.href=e,o.href}var m=e;function e(e,t,n){var r=s(e=e instanceof RegExp?o(e,n):e,t=t instanceof RegExp?o(t,n):t,n);return r&&{start:r[0],end:r[1],pre:n.slice(0,r[0]),body:n.slice(r[0]+e.length,r[1]),post:n.slice(r[1]+t.length)}}function o(e,t){t=t.match(e);return t?t[0]:null}function s(e,t,n){var r,o,s,a,c,i=n.indexOf(e),u=n.indexOf(t,i+1),l=i;if(0<=i&&0<u){for(r=[],s=n.length;0<=l&&!c;)l==i?(r.push(l),i=n.indexOf(e,l+1)):1==r.length?c=[r.pop(),u]:((o=r.pop())<s&&(s=o,a=u),u=n.indexOf(t,l+1)),l=i<u&&0<=i?i:u;r.length&&(c=[s,a])}return c}function A(o,e){var s=x({},{preserveStatic:!0,removeComments:!1},1<arguments.length&&void 0!==e?e:{});function a(e){throw new Error("CSS parse error: ".concat(e))}function c(e){e=e.exec(o);if(e)return o=o.slice(e[0].length),e}function i(){return c(/^{\s*/)}function u(){return c(/^}/)}function l(){c(/^\s*/)}function f(){for(var e,t=[];e=function(){if(l(),"/"===o[0]&&"*"===o[1]){for(var e=2;o[e]&&("*"!==o[e]||"/"!==o[e+1]);)e++;if(!o[e])return a("end of comment is missing");var t=o.slice(2,e);return o=o.slice(e+2),{type:"comment",comment:t}}}();)t.push(e);return s.removeComments?[]:t}function d(){for(l();"}"===o[0];)a("extra closing bracket");var e=c(/^(("(?:\\"|[^"])*"|'(?:\\'|[^'])*'|[^{])+)/);if(e)return e[0].trim().replace(/\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*\/+/g,"").replace(/"(?:\\"|[^"])*"|'(?:\\'|[^'])*'/g,function(e){return e.replace(/,/g,"â€Œ")}).split(/\s*(?![^(]*\)),\s*/).map(function(e){return e.replace(/\u200C/g,",")})}function p(){if(!i())return a("missing '{'");for(var e,t=f();e=function(){if("@"===o[0])return r();c(/^([;\s]*)+/);var e=/\/\*[^*]*\*+([^/*][^*]*\*+)*\//g;if(n=c(/^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/)){if(n=n[0].trim(),!c(/^:\s*/))return a("property missing ':'");var t=c(/^((?:\/\*.*?\*\/|'(?:\\'|.)*?'|"(?:\\"|.)*?"|\((\s*'(?:\\'|.)*?'|"(?:\\"|.)*?"|[^)]*?)\s*\)|[^};])+)/),n={type:"declaration",property:n.replace(e,""),value:t?t[0].replace(e,"").trim():""};return c(/^[;\s]*/),n}}();)t.push(e),t=t.concat(f());return u()?t:a("missing '}'")}function t(){var e=c(/^@([-\w]+)?keyframes\s*/);if(e){var t=e[1];if(!(e=c(/^([-\w]+)\s*/)))return a("@keyframes missing name");var n,e=e[1];if(!i())return a("@keyframes missing '{'");for(var r=f();n=function(){l();for(var e,t=[];e=c(/^((\d+\.\d+|\.\d+|\d+)%?|[a-z]+)\s*/);)t.push(e[1]),c(/^,\s*/);if(t.length)return{type:"keyframe",values:t,declarations:p()}}();)r.push(n),r=r.concat(f());return u()?{type:"keyframes",name:e,vendor:t,keyframes:r}:a("@keyframes missing '}'")}}function r(){var e;if(l(),"@"===o[0])return(e=function(){var e=c(/^@(import|charset|namespace)\s*([^;]+);/);if(e)return{type:e[1],name:e[2].trim()}}()||function(){if(c(/^@font-face\s*/))return{type:"font-face",declarations:p()}}()||function(){var e=c(/^@media([^{]+)*/);if(e)return{type:"media",media:(e[1]||"").trim(),rules:n()}}()||t()||function(){var e=c(/^@supports *([^{]+)/);if(e)return{type:"supports",supports:e[1].trim(),rules:n()}}()||function(){var e=c(/^@([-\w]+)?document *([^{]+)/);if(e)return{type:"document",document:e[2].trim(),vendor:e[1]?e[1].trim():null,rules:n()}}()||function(){var e=c(/^@custom-media\s+(--[^\s]+)\s*([^{;]+);/);if(e)return{type:"custom-media",name:e[1].trim(),media:e[2].trim()}}()||function(){if(c(/^@host\s*/))return{type:"host",rules:n()}}()||function(){if(c(/^@page */))return{type:"page",selectors:d()||[],declarations:p()}}()||function(){var e=c(/@(top|bottom|left|right)-(left|center|right|top|middle|bottom)-?(corner)?\s*/);if(e)return{type:"page-margin-box",name:"".concat(e[1],"-").concat(e[2])+(e[3]?"-".concat(e[3]):""),declarations:p()}}())&&!s.preserveStatic?(e.declarations?e.declarations.some(function(e){return/var\(/.test(e.value)}):(e.keyframes||e.rules||[]).some(function(e){return(e.declarations||[]).some(function(e){return/var\(/.test(e.value)})}))?e:{}:e}function n(e){if(!e&&!i())return a("missing '{'");for(var t,n=f();o.length&&(e||"}"!==o[0])&&(t=r()||function(){if(!s.preserveStatic){var e=m("{","}",o);if(e){var t=/:(?:root|host)(?![.:#(])/.test(e.pre)&&/--\S*\s*:/.test(e.body),n=/var\(/.test(e.body);if(!t&&!n)return o=o.slice(e.end+1),{}}}var r=d()||[],t=s.preserveStatic?p():p().filter(function(e){var t=r.some(function(e){return/:(?:root|host)(?![.:#(])/.test(e)})&&/^--\S/.test(e.property),e=/var\(/.test(e.value);return t||e});return r.length||a("selector missing"),{type:"rule",selectors:r,declarations:t}}());)t.type&&n.push(t),n=n.concat(f());return e||u()?n:a("missing '}'")}return{type:"stylesheet",stylesheet:{rules:n(!0),errors:[]}}}function O(e,t){var r=x({},{parseHost:!1,store:{},onWarning:function(){}},1<arguments.length&&void 0!==t?t:{}),n=new RegExp(":".concat(r.parseHost?"host":"root","$"));(e="string"==typeof e?A(e,r):e).stylesheet.rules.forEach(function(e){"rule"===e.type&&e.selectors.some(function(e){return n.test(e)})&&e.declarations.forEach(function(e,t){var n=e.property,e=e.value;n&&0===n.indexOf("--")&&(r.store[n]=e)})}),r.store}function j(e,t,n){var s=1<arguments.length&&void 0!==t?t:"",a=2<arguments.length?n:void 0,c={charset:function(e){return"@charset "+e.name+";"},comment:function(e){return 0===e.comment.indexOf("__CSSVARSPONYFILL")?"/*"+e.comment+"*/":""},"custom-media":function(e){return"@custom-media "+e.name+" "+e.media+";"},declaration:function(e){return e.property+":"+e.value+";"},document:function(e){return"@"+(e.vendor||"")+"document "+e.document+"{"+r(e.rules)+"}"},"font-face":function(e){return"@font-face{"+r(e.declarations)+"}"},host:function(e){return"@host{"+r(e.rules)+"}"},import:function(e){return"@import "+e.name+";"},keyframe:function(e){return e.values.join(",")+"{"+r(e.declarations)+"}"},keyframes:function(e){return"@"+(e.vendor||"")+"keyframes "+e.name+"{"+r(e.keyframes)+"}"},media:function(e){return"@media "+e.media+"{"+r(e.rules)+"}"},namespace:function(e){return"@namespace "+e.name+";"},page:function(e){return"@page "+(e.selectors.length?e.selectors.join(", "):"")+"{"+r(e.declarations)+"}"},"page-margin-box":function(e){return"@"+e.name+"{"+r(e.declarations)+"}"},rule:function(e){var t=e.declarations;if(t.length)return e.selectors.join(",")+"{"+r(t)+"}"},supports:function(e){return"@supports "+e.supports+"{"+r(e.rules)+"}"}};function r(e){for(var t="",n=0;n<e.length;n++){var r=e[n],o=(a&&a(r),c[r.type](r));o&&(t+=o,o.length&&r.selectors&&(t+=s))}return t}return r(e.stylesheet.rules)}function k(e,t){var c=x({},{preserveStatic:!0,preserveVars:!1,variables:{},onWarning:function(){}},1<arguments.length&&void 0!==t?t:{});(function e(n,r){n.rules.forEach(function(t){t.rules?e(t,r):t.keyframes?t.keyframes.forEach(function(e){"keyframe"===e.type&&r(e.declarations,t)}):t.declarations&&r(t.declarations,n)})})((e="string"==typeof e?A(e,c):e).stylesheet,function(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=r.type,s=r.property,a=r.value;"declaration"===o&&(c.preserveVars||!s||0!==s.indexOf("--")?-1!==a.indexOf("var(")&&(a=function o(e){var s=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},a=2<arguments.length?arguments[2]:void 0;if(-1===e.indexOf("var("))return e;var t=m("(",")",e);function n(e){var t=e.split(",")[0].replace(/[\s\n\t]/g,""),n=(e.match(/(?:\s*,\s*){1}(.*)?/)||[])[1],r=Object.prototype.hasOwnProperty.call(s.variables,t)?String(s.variables[t]):void 0,n=r||(n?String(n):void 0),e=a||e;return r||s.onWarning('variable "'.concat(t,'" is undefined')),n&&"undefined"!==n&&0<n.length?o(n,s,e):"var(".concat(e,")")}if(t)return"var"===t.pre.slice(-3)?0===t.body.trim().length?(s.onWarning("var() must contain a non-whitespace string"),e):t.pre.slice(0,-3)+n(t.body)+o(t.post,s):t.pre+"(".concat(o(t.body,s),")")+o(t.post,s);return-1!==e.indexOf("var(")&&s.onWarning('missing closing ")" in the value "'.concat(e,'"')),e}(a,c))!==r.value&&(a=function(n){return(n.match(/calc\(([^)]+)\)/g)||[]).forEach(function(e){var t="calc".concat(e.split("calc").join(""));n=n.replace(e,t)}),n}(a),c.preserveVars?(e.splice(n,0,{type:o,property:s,value:a}),n++):r.value=a):(e.splice(n,1),n--))}}),j(e)}e.range=s;var u="undefined"!=typeof window,f=u&&window.CSS&&window.CSS.supports&&window.CSS.supports("(--a: 0)"),_={group:0,job:0},d={rootElement:u?document:null,shadowDOM:!1,include:"style,link[rel=stylesheet]",exclude:"",variables:{},onlyLegacy:!0,preserveStatic:!0,preserveVars:!1,silent:!1,updateDOM:!0,updateURLs:!0,watch:null,onBeforeSend:function(){},onError:function(){},onWarning:function(){},onSuccess:function(){},onComplete:function(){},onFinally:function(){}},M={cssComments:/\/\*[\s\S]+?\*\//g,cssKeyframes:/@(?:-\w*-)?keyframes/,cssMediaQueries:/@media[^{]+\{([\s\S]+?})\s*}/g,cssUrls:/url\((?!['"]?(?:data|http|\/\/):)['"]?([^'")]*)['"]?\)/g,cssVarDeclRules:/(?::(?:root|host)(?![.:#(])[\s,]*[^{]*{\s*[^}]*})/g,cssVarDecls:/(?:[\s;]*)(-{2}\w[\w-]*)(?:\s*:\s*)([^;]*);/g,cssVarFunc:/var\(\s*--[\w-]/,cssVars:/(?:(?::(?:root|host)(?![.:#(])[\s,]*[^{]*{\s*[^;]*;*\s*)|(?:var\(\s*))(--[^:)]+)(?:\s*[:)])/},T={dom:{},job:{},user:{}},L=!1,v=null,R=0,y=null,h=!1;function D(){var e,n,r,o,s=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},a="cssVars(): ",b=x({},d,s);function S(e,t,n,r){!b.silent&&window.console&&console.error("".concat(a).concat(e,"\n"),t),b.onError(e,t,n,r)}function E(e){!b.silent&&window.console&&console.warn("".concat(a).concat(e)),b.onWarning(e)}function w(e){b.onFinally(Boolean(e),f,N()-b.__benchmark)}if(u){if(b.watch)return b.watch=d.watch,o=b,window.MutationObserver&&(v&&(v.disconnect(),v=null),(v=new MutationObserver(function(e){e.some(function(e){var t,n=!1;return"attributes"===e.type?n=i(e.target):"childList"===e.type&&(t=e.addedNodes,n=Array.apply(null,t).some(function(e){var t=1===e.nodeType&&e.hasAttribute("data-cssvars"),n="STYLE"===e.tagName&&!c(e)&&M.cssVars.test(e.textContent);return!t&&(i(e)||n)})||(t=e.removedNodes,Array.apply(null,t).some(function(e){var t=1===e.nodeType,n=t&&"out"===e.getAttribute("data-cssvars"),t=t&&"src"===e.getAttribute("data-cssvars"),r=t;return(t||n)&&(n=e.getAttribute("data-cssvars-group"),e=o.rootElement.querySelector('[data-cssvars-group="'.concat(n,'"]')),t&&(V(o.rootElement),T.dom={}),e&&e.parentNode.removeChild(e)),r}))),n})&&D(o)})).observe(document.documentElement,{attributes:!0,attributeFilter:["disabled","href"],childList:!0,subtree:!0})),void D(b);if(!1===b.watch&&v&&(v.disconnect(),v=null),!b.__benchmark){if(L===b.rootElement)return void function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:100;clearTimeout(y),y=setTimeout(function(){e.__benchmark=null,D(e)},t)}(s);b.__benchmark=N(),b.exclude=[v?'[data-cssvars]:not([data-cssvars=""])':'[data-cssvars="out"]',b.exclude].filter(function(e){return e}).join(","),b.variables=function(){var n=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},r=/^-{2}/;return Object.keys(n).reduce(function(e,t){return e[r.test(t)?t:"--".concat(t.replace(/^-+/,""))]=n[t],e},{})}(b.variables),v||(Array.apply(null,b.rootElement.querySelectorAll('[data-cssvars="out"]')).forEach(function(e){var t=e.getAttribute("data-cssvars-group");t&&b.rootElement.querySelector('[data-cssvars="src"][data-cssvars-group="'.concat(t,'"]'))||e.parentNode.removeChild(e)}),R&&(e=b.rootElement.querySelectorAll('[data-cssvars]:not([data-cssvars="out"])')).length<R&&(R=e.length,T.dom={}))}"loading"!==document.readyState?f&&b.onlyLegacy?(n=!1,b.updateDOM&&(r=b.rootElement.host||(b.rootElement===document?document.documentElement:b.rootElement),Object.keys(b.variables).forEach(function(e){var t=b.variables[e];n=n||t!==getComputedStyle(r).getPropertyValue(e),r.style.setProperty(e,t)})),w(n)):!h&&(b.shadowDOM||b.rootElement.shadowRoot||b.rootElement.host)?t({rootElement:d.rootElement,include:d.include,exclude:b.exclude,skipDisabled:!1,onSuccess:function(e,t,n){return((e=e.replace(M.cssComments,"").replace(M.cssMediaQueries,"")).match(M.cssVarDeclRules)||[]).join("")||!1},onComplete:function(e,t,n){O(e,{store:T.dom,onWarning:E}),h=!0,D(b)}}):(L=b.rootElement,t({rootElement:b.rootElement,include:b.include,exclude:b.exclude,skipDisabled:!1,onBeforeSend:b.onBeforeSend,onError:function(e,t,n){var n=e.responseURL||g(n,location.href),r=e.statusText?"(".concat(e.statusText,")"):"Unspecified Error"+(0===e.status?" (possibly CORS related)":"");S("CSS XHR Error: ".concat(n," ").concat(e.status," ").concat(r),t,e,n)},onSuccess:function(e,t,n){var r,o,s="LINK"===t.tagName,a="STYLE"===t.tagName&&e!==t.textContent,t=b.onSuccess(e,t,n);return e=void 0!==t&&!1===Boolean(t)?"":t||e,b.updateURLs&&(s||a)&&(o=n,((r=e).replace(M.cssComments,"").match(M.cssUrls)||[]).forEach(function(e){var t=e.replace(M.cssUrls,"$1"),n=g(t,o);r=r.replace(e,e.replace(t,n))}),e=r),e},onComplete:function(e,u){var t=2<arguments.length&&void 0!==arguments[2]?arguments[2]:[],n=x({},T.dom,T.user);if(T.job={},t.forEach(function(e,t){var n=u[t];if(M.cssVars.test(n))try{var r=A(n,{preserveStatic:b.preserveStatic,removeComments:!0});O(r,{parseHost:Boolean(b.rootElement.host),store:T.dom,onWarning:E}),e.__cssVars={tree:r}}catch(t){S(t.message,e)}}),x(T.job,T.dom),b.updateDOM?(x(T.user,b.variables),x(T.job,T.user)):(x(T.job,T.user,b.variables),x(n,b.variables)),0<_.job&&Boolean(Object.keys(T.job).length>Object.keys(n).length||Boolean(Object.keys(n).length&&Object.keys(T.job).some(function(e){return T.job[e]!==n[e]}))))V(b.rootElement),D(b);else{var l=[],f=[],d=!1;if(b.updateDOM&&_.job++,t.forEach(function(t,e){var n=!t.__cssVars;if(t.__cssVars)try{k(t.__cssVars.tree,x({},b,{variables:T.job,onWarning:E}));var r,o,s,a,c,i=j(t.__cssVars.tree);b.updateDOM?(r=u[e],o=M.cssVarFunc.test(r),t.getAttribute("data-cssvars")||t.setAttribute("data-cssvars","src"),i.length&&o&&(s=t.getAttribute("data-cssvars-group")||++_.group,a=i.replace(/\s/g,""),c=b.rootElement.querySelector('[data-cssvars="out"][data-cssvars-group="'.concat(s,'"]'))||document.createElement("style"),d=d||M.cssKeyframes.test(i),b.preserveStatic&&(t.sheet.disabled=!0),c.hasAttribute("data-cssvars")||c.setAttribute("data-cssvars","out"),a===t.textContent.replace(/\s/g,"")?(n=!0,c&&c.parentNode&&(t.removeAttribute("data-cssvars-group"),c.parentNode.removeChild(c))):a!==c.textContent.replace(/\s/g,"")&&([t,c].forEach(function(e){e.setAttribute("data-cssvars-job",_.job),e.setAttribute("data-cssvars-group",s)}),c.textContent=i,l.push(i),f.push(c),c.parentNode||t.parentNode.insertBefore(c,t.nextSibling)))):t.textContent.replace(/\s/g,"")!==i&&l.push(i)}catch(e){S(e.message,t)}n&&t.setAttribute("data-cssvars","skip"),t.hasAttribute("data-cssvars-job")||t.setAttribute("data-cssvars-job",_.job)}),R=b.rootElement.querySelectorAll('[data-cssvars]:not([data-cssvars="out"])').length,b.shadowDOM)for(var r,o=[b.rootElement].concat(function(e){if(Array.isArray(e))return C(e)}(t=b.rootElement.querySelectorAll("*"))||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(t)||function(e,t){if(e){if("string"==typeof e)return C(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(n="Object"===n&&e.constructor?e.constructor.name:n)||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?C(e,t):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=0;r=o[s];++s)r.shadowRoot&&r.shadowRoot.querySelector("style")&&D(x({},b,{rootElement:r.shadowRoot}));if(b.updateDOM&&d){t=b.rootElement;var a=["animation-name","-moz-animation-name","-webkit-animation-name"].filter(function(e){return getComputedStyle(document.body)[e]})[0];if(a){for(var c=t.getElementsByTagName("*"),i=[],p=0,m=c.length;p<m;p++){var v=c[p];"none"!==getComputedStyle(v)[a]&&(v.style[a]+="__CSSVARSPONYFILL-KEYFRAMES__",i.push(v))}document.body.offsetHeight;for(var y=0,h=i.length;y<h;y++){var g=i[y].style;g[a]=g[a].replace("__CSSVARSPONYFILL-KEYFRAMES__","")}}}L=!1,b.onComplete(l.join(""),f,JSON.parse(JSON.stringify(T.job)),N()-b.__benchmark),w(f.length)}}})):document.addEventListener("DOMContentLoaded",function e(t){D(s),document.removeEventListener("DOMContentLoaded",e)})}function c(e){var t=e.hasAttribute("disabled"),e=(e.sheet||{}).disabled;return t||e}function i(e){return"LINK"===e.tagName&&-1!==(e.getAttribute("rel")||"").indexOf("stylesheet")&&!c(e)}}function g(e,t){var t=1<arguments.length&&void 0!==t?t:location.href,n=document.implementation.createHTMLDocument(""),r=n.createElement("base"),o=n.createElement("a");return n.head.appendChild(r),n.body.appendChild(o),r.href=t,o.href=e,o.href}function N(){return u&&(window.performance||{}).now?window.performance.now():(new Date).getTime()}function V(e){Array.apply(null,e.querySelectorAll('[data-cssvars="skip"],[data-cssvars="src"]')).forEach(function(e){return e.setAttribute("data-cssvars","")})}return D.reset=function(){for(var e in _.job=0,_.group=0,L=!1,v&&(v.disconnect(),v=null),R=0,y=null,h=!1,T)T[e]={}},D});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
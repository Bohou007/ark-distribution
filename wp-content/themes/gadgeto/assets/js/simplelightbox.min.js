"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}!function(t){"function"==typeof define&&define.amd?define([],t):"object"===("undefined"==typeof module?"undefined":_typeof(module))&&module.exports?module.exports=t():(void 0).SimpleLightbox=t()}(function(){function e(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];if(n)for(var i in n)n.hasOwnProperty(i)&&(t[i]=n[i])}return t}function i(t,e){t&&e&&(t.className+=" "+e)}function o(t,e){t&&e&&(t.className=t.className.replace(new RegExp("(\\s|^)"+e+"(\\s|$)")," ").trim())}function r(t){var e=document.createElement("div");return e.innerHTML=t.trim(),e.childNodes[0]}function n(t,e){return(t.matches||t.matchesSelector||t.msMatchesSelector).call(t,e)}function s(t){this.init.apply(this,arguments)}return s.defaults={elementClass:"",elementLoadingClass:"slbLoading",htmlClass:"slbActive",closeBtnClass:"",nextBtnClass:"",prevBtnClass:"",loadingTextClass:"",closeBtnCaption:"Close",nextBtnCaption:"Next",prevBtnCaption:"Previous",loadingCaption:"Loading...",bindToItems:!0,closeOnOverlayClick:!0,closeOnEscapeKey:!0,nextOnImageClick:!0,showCaptions:!0,captionAttribute:"title",urlAttribute:"href",startAt:0,loadingTimeout:100,appendTarget:"body",beforeSetContent:null,beforeClose:null,afterClose:null,beforeDestroy:null,afterDestroy:null,videoRegex:new RegExp(/youtube.com|youtu.be|vimeo.com/)},e(s.prototype,{init:function(n){n=this.options=e({},s.defaults,n);var t,i=this;n.$items&&(t=n.$items.get()),n.elements&&(t=[].slice.call("string"==typeof n.elements?document.querySelectorAll(n.elements):n.elements)),this.eventRegistry={lightbox:[],thumbnails:[]},this.items=[],this.captions=[],t&&t.forEach(function(t,e){i.items.push(t.getAttribute(n.urlAttribute)),i.captions.push(t.getAttribute(n.captionAttribute)),n.bindToItems&&i.addEvent(t,"click",function(t){t.preventDefault(),i.showPosition(e)},"thumbnails")}),n.items&&(this.items=n.items),n.captions&&(this.captions=n.captions)},addEvent:function(t,e,n,i){return this.eventRegistry[i||"lightbox"].push({element:t,eventName:e,callback:n}),t.addEventListener(e,n),this},removeEvents:function(t){return this.eventRegistry[t].forEach(function(t){t.element.removeEventListener(t.eventName,t.callback)}),this.eventRegistry[t]=[],this},next:function(){return this.showPosition(this.currentPosition+1)},prev:function(){return this.showPosition(this.currentPosition-1)},normalizePosition:function(t){return t>=this.items.length?t=0:t<0&&(t=this.items.length-1),t},showPosition:function(t){t=this.normalizePosition(t);return void 0!==this.currentPosition&&(this.direction=t>this.currentPosition?"next":"prev"),this.currentPosition=t,this.setupLightboxHtml().prepareItem(this.currentPosition,this.setContent).show()},loading:function(t){var e=this,n=this.options;t?this.loadingTimeout=setTimeout(function(){i(e.$el,n.elementLoadingClass),e.$content.innerHTML='<p class="slbLoadingText '+n.loadingTextClass+'">'+n.loadingCaption+"</p>",e.show()},n.loadingTimeout):(o(this.$el,n.elementLoadingClass),clearTimeout(this.loadingTimeout))},getVideoURL:function(t){for(var e="//_URL_",n=[{rx:/^(?:https?:)?\/\/(?:www\.)?vimeo\.com\/([^\?&"]+).*$/g,tmpl:e.replace("_URL_","player.vimeo.com/video/$1")},{rx:/^.*(?:https?:\/\/)?(?:www\.)?(?:youtube\.com|youtu\.be)\/(?:watch\?v=|embed\/|v\/|user\/.+\/)?([^\?&"]+).*$/g,tmpl:e.replace("_URL_","www.youtube.com/embed/$1")},{rx:/^.*(?:https?:\/\/)?(?:www\.)?(?:youtube-nocookie\.com)\/(?:watch\?v=|embed\/|v\/|user\/.+\/)?([^\?&"]+).*$/g,tmpl:e.replace("_URL_","www.youtube-nocookie.com/embed/$1")}],i=0;i<n.length;i++)if(n[i].rx.test(t))return t.replace(n[i].rx,n[i].tmpl);return t},prepareItem:function(t,e){var n,i,o=this,s=this.items[t];return this.loading(!0),this.options.videoRegex.test(s)?(n=this.getVideoURL(s),e.call(o,r('<div class="slbIframeCont"><iframe class="slbIframe" frameborder="0" allowfullscreen src="'+n+'"></iframe></div>'))):(i=r('<div class="slbImageWrap"><img class="slbImage" src="'+s+'" /></div>'),this.$currentImage=i.querySelector(".slbImage"),this.options.showCaptions&&this.captions[t]&&i.appendChild(r('<div class="slbCaption">'+this.captions[t]+"</div>")),this.loadImage(s,function(){o.setImageDimensions(),e.call(o,i),o.loadImage(o.items[o.normalizePosition(o.currentPosition+1)])})),this},loadImage:function(t,e){var n;this.options.videoRegex.test(t)||(n=new Image,e&&(n.onload=e),n.src=t)},setupLightboxHtml:function(){var t=this.options;return this.$el||(this.$el=r('<div class="slbElement '+t.elementClass+'"><div class="slbOverlay"></div><div class="slbWrapOuter"><div class="slbWrap"><div class="slbContentOuter"><div class="slbContent"></div><button type="button" title="'+t.closeBtnCaption+'" class="slbCloseBtn '+t.closeBtnClass+'">Ã—</button>'+(1<this.items.length?'<div class="slbArrows"><button type="button" title="'+t.prevBtnCaption+'" class="prev slbArrow'+t.prevBtnClass+'">'+t.prevBtnCaption+'</button><button type="button" title="'+t.nextBtnCaption+'" class="next slbArrow'+t.nextBtnClass+'">'+t.nextBtnCaption+"</button></div>":"")+"</div></div></div></div>"),this.$content=this.$el.querySelector(".slbContent")),this.$content.innerHTML="",this},show:function(){return this.modalInDom||(document.querySelector(this.options.appendTarget).appendChild(this.$el),i(document.documentElement,this.options.htmlClass),this.setupLightboxEvents(),this.modalInDom=!0),this},setContent:function(t){t="string"==typeof t?r(t):t;return this.loading(!1),this.setupLightboxHtml(),o(this.$content,"slbDirectionNext"),o(this.$content,"slbDirectionPrev"),this.direction&&i(this.$content,"next"===this.direction?"slbDirectionNext":"slbDirectionPrev"),this.options.beforeSetContent&&this.options.beforeSetContent(t,this),this.$content.appendChild(t),this},setImageDimensions:function(){this.$currentImage&&(this.$currentImage.style.maxHeight=("innerHeight"in window?window.innerHeight:document.documentElement.offsetHeight)+"px")},setupLightboxEvents:function(){var e=this;return this.eventRegistry.lightbox.length||this.addEvent(this.$el,"click",function(t){t=t.target;n(t,".slbCloseBtn")||e.options.closeOnOverlayClick&&n(t,".slbWrap")?e.close():n(t,".slbArrow")?n(t,".next")?e.next():e.prev():e.options.nextOnImageClick&&1<e.items.length&&n(t,".slbImage")&&e.next()}).addEvent(document,"keyup",function(t){e.options.closeOnEscapeKey&&27===t.keyCode&&e.close(),1<e.items.length&&(39!==t.keyCode&&68!==t.keyCode||e.next(),37!==t.keyCode&&65!==t.keyCode||e.prev())}).addEvent(window,"resize",function(){e.setImageDimensions()}),this},close:function(){this.modalInDom&&(this.runHook("beforeClose"),this.removeEvents("lightbox"),this.$el&&this.$el.parentNode.removeChild(this.$el),o(document.documentElement,this.options.htmlClass),this.modalInDom=!1,this.runHook("afterClose")),this.direction=void 0,this.currentPosition=this.options.startAt},destroy:function(){this.close(),this.runHook("beforeDestroy"),this.removeEvents("thumbnails"),this.runHook("afterDestroy")},runHook:function(t){this.options[t]&&this.options[t](this)}}),s.open=function(t){var e=new s(t);return t.content?e.setContent(t.content).show():e.showPosition(e.options.startAt)},s.registerAsJqueryPlugin=function(i){i.fn.simpleLightbox=function(t){var e,n=this;return this.each(function(){i.data(this,"simpleLightbox")||(e=e||new s(i.extend({},t,{$items:n})),i.data(this,"simpleLightbox",e))})},i.SimpleLightbox=s},"undefined"!=typeof window&&window.jQuery&&s.registerAsJqueryPlugin(window.jQuery),s});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNpbXBsZWxpZ2h0Ym94LmpzIl0sIm5hbWVzIjpbImZhY3RvcnkiLCJkZWZpbmUiLCJhbWQiLCJfdHlwZW9mIiwibW9kdWxlIiwiZXhwb3J0cyIsIlNpbXBsZUxpZ2h0Ym94IiwiYXNzaWduIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsIm9iaiIsImhhc093blByb3BlcnR5Iiwia2V5IiwiYWRkQ2xhc3MiLCJlbGVtZW50IiwiY2xhc3NOYW1lIiwicmVtb3ZlQ2xhc3MiLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJIVE1MIiwiaHRtbCIsInJlcGxhY2UiLCJjaGlsZE5vZGVzIiwidHJpbSIsInBhcnNlSHRtbCIsImRpdiIsImRvY3VtZW50Iiwid2luZG93Iiwib3B0aW9ucyIsImRlZmF1bHRzIiwic2VsZWN0b3IiLCJlbGVtZW50Q2xhc3MiLCJlbCIsIm1hdGNoZXMiLCJtYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImNhbGwiLCJiaW5kVG9JdGVtcyIsImNsb3NlT25PdmVybGF5Q2xpY2siLCJ0aGlzIiwiY2FwdGlvbkF0dHJpYnV0ZSIsInN0YXJ0QXQiLCJodG1sQ2xhc3MiLCJsb2FkaW5nVGltZW91dCIsIm5leHRCdG5DbGFzcyIsImFwcGVuZFRhcmdldCIsImxvYWRpbmdUZXh0Q2xhc3MiLCJiZWZvcmVDbG9zZSIsImFmdGVyQ2xvc2UiLCJiZWZvcmVEZXN0cm95IiwiYWZ0ZXJEZXN0cm95IiwiY2xvc2VPbkVzY2FwZUtleSIsInByb3RvdHlwZSIsIm5leHRPbkltYWdlQ2xpY2siLCJ1cmxBdHRyaWJ1dGUiLCJlbGVtZW50cyIsImJlZm9yZVNldENvbnRlbnQiLCJldmVudFJlZ2lzdHJ5IiwibGlnaHRib3giLCJ0aHVtYm5haWxzIiwidmlkZW9SZWdleCIsIlJlZ0V4cCIsInNlbGYiLCJwdXNoIiwicHJldmVudERlZmF1bHQiLCJhZGRFdmVudCIsIiRpdGVtcyIsImdldCIsInNsaWNlIiwicXVlcnlTZWxlY3RvckFsbCIsIml0ZW1zIiwic2NvcGUiLCJldmVudE5hbWUiLCJmb3JFYWNoIiwiaW5kZXgiLCJnZXRBdHRyaWJ1dGUiLCJjYXB0aW9ucyIsImUiLCJzaG93UG9zaXRpb24iLCJwb3NpdGlvbiIsImRpcmVjdGlvbiIsIm5ld1Bvc2l0aW9uIiwiY3VycmVudFBvc2l0aW9uIiwic2V0dXBMaWdodGJveEh0bWwiLCJjYWxsYmFjayIsImFkZEV2ZW50TGlzdGVuZXIiLCJmcm0iLCJpdGVtIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImVsZW1lbnRMb2FkaW5nQ2xhc3MiLCJuZXh0IiwicHJldiIsIm5vcm1hbGl6ZVBvc2l0aW9uIiwiJGN1cnJlbnRJbWFnZSIsIiRpbWFnZUNvbnQiLCJzaG93Q2FwdGlvbnMiLCJhcHBlbmRDaGlsZCIsImxvYWRJbWFnZSIsInNob3ciLCJsb2FkaW5nIiwib24iLCJpbWFnZSIsIkltYWdlIiwic3JjIiwic2V0VGltZW91dCIsIiRlbCIsIiRjb250ZW50IiwicXVlcnlTZWxlY3RvciIsImNsZWFyVGltZW91dCIsImRvY3VtZW50RWxlbWVudCIsImdldFZpZGVvVVJMIiwidXJsIiwic2V0Q29udGVudCIsInJ4IiwidG1wbCIsImNvbnZlcnRzIiwicHJlcGFyZUl0ZW0iLCJzZXR1cExpZ2h0Ym94RXZlbnRzIiwidmlkZW9VUkwiLCJrZXlDb2RlIiwic2V0SW1hZ2VEaW1lbnNpb25zIiwibW9kYWxJbkRvbSIsInVuZGVmaW5lZCIsInRlc3QiLCJydW5Ib29rIiwib25sb2FkIiwicmVtb3ZlRXZlbnRzIiwibyIsIm9wZW4iLCJjb250ZW50IiwicmVnaXN0ZXJBc0pxdWVyeVBsdWdpbiIsImV4dGVuZCIsImNsb3NlQnRuQ2xhc3MiLCJwcmV2QnRuQ2FwdGlvbiIsInByZXZCdG5DbGFzcyIsIm5leHRCdG5DYXB0aW9uIiwic3R5bGUiLCJtYXhIZWlnaHQiLCJpbm5lckhlaWdodCIsImNsb3NlQnRuQ2FwdGlvbiIsIm9mZnNldEhlaWdodCIsIiR0YXJnZXQiLCJjbG9zZSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImRlc3Ryb3kiLCJuYW1lIiwiaW5zdGFuY2UiLCIkIiwiZm4iLCJzaW1wbGVMaWdodGJveCIsImxpZ2h0Ym94SW5zdGFuY2UiLCJlYWNoIiwiZGF0YSIsImpRdWVyeSJdLCJtYXBwaW5ncyI6IitQQUFDLFNBQWVBLEdBRVUsbUJBQVhDLFFBQXlCQSxPQUFPQyxJQUN2Q0QsT0FBTyxHQUFJRCxHQUhNLFlBQXhCLG9CQUFlQSxPQUFmLFlBQUFHLFFBQWVILFVBQVNJLE9BQUFDLFFBRWpCRCxPQUFPSCxRQUFXRCxVQUZ6QixHQUljTSxlQUFBTixJQUpkLENBT1csV0FQWCxTQVVPTyxFQUFBQyxHQUlBLElBQVNDLElBQUlBLEVBQUksRUFBR0MsRUFBQUEsVUFBVUMsT0FBOUJGLElBQTJDLENBRXZDLElBQUlHLEVBQU1GLFVBQVVELEdBR2hCLEdBQUtHLEVBQ0dDLElBQUFBLElBQUFBLEtBQUpELEVBQ0hBLEVBQUFDLGVBQUFDLEtBQUFOLEVBQUFNLEdBQUFGLEVBQUFFLElBS1QsT0FBT04sRUFRTixTQUFBTyxFQUFBQyxFQUFBQyxHQUZHRCxHQUFXQyxJQU1WQyxFQUFBQSxXQUFxQkQsSUFBQUEsR0FBOUIsU0FBU0MsRUFBWUYsRUFBU0MsR0FZbkJELEdBQVlHLElBQ2ZDLEVBQVlDLFVBQWhCTCxFQUFBQyxVQUFBSyxRQUVXQyxJQUFBQSxPQUFKLFVBQVBOLEVBQUEsV0FBQSxLQUVITyxRQVBELFNBQVNDLEVBQVVKLEdBaUJmLElBQU9LLEVBQUFDLFNBQUFSLGNBQ0RTLE9BS1YsT0FGQ0YsRUFBQU4sVUFBQUMsRUFBQUcsT0FFUWxCLEVBQUFBLFdBQWV1QixHQU14QnZCLFNBQUFBLEVBQWV3QixFQUFmQyxHQUdJQyxPQUFZQyxFQUFFQyxTQUhRRCxFQUFBRSxpQkFBQUYsRUFBQUcsbUJBQUFDLEtBQUFKLEVBQUFGLEdBaUJ0Qk8sU0FBQUEsRUFqQnNCVCxHQWtCdEJVLEtBQUFBLEtBQUFBLE1BQW1CQyxLQWxCRzlCLFdBdWQxQixPQWhjSStCLEVBQUFBLFNBdkJzQixDQXdCQVQs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ZStJLEVBQUVqQixPQUFPLEdBQUl2RyxFQUFTLENBQUNzQyxPQUFRQSxLQUN6RmtGLEVBQUVLLEtBQUtsSCxLQUFNLGlCQUFrQmdILE9BTTNDSCxFQUFFL0ksZUFBaUJBLEdBSUQsb0JBQVhzQixRQUEwQkEsT0FBTytILFFBQ3hDckosRUFBZTZILHVCQUF1QnZHLE9BQU8rSCxRQUcxQ3JKIiwiZmlsZSI6InNpbXBsZWxpZ2h0Ym94Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbihyb290LCBmYWN0b3J5KSB7XHJcblxyXG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xyXG4gICAgICAgIGRlZmluZShbXSwgZmFjdG9yeSk7XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzKSB7XHJcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJvb3QuU2ltcGxlTGlnaHRib3ggPSBmYWN0b3J5KCk7XHJcbiAgICB9XHJcblxyXG59KHRoaXMsIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgIGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQpIHtcclxuXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBvYmogPSBhcmd1bWVudHNbaV07XHJcblxyXG4gICAgICAgICAgICBpZiAob2JqKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqLmhhc093blByb3BlcnR5KGtleSkgJiYgKHRhcmdldFtrZXldID0gb2JqW2tleV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYWRkQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKSB7XHJcblxyXG4gICAgICAgIGlmIChlbGVtZW50ICYmIGNsYXNzTmFtZSkge1xyXG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSArPSAnICcgKyBjbGFzc05hbWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiByZW1vdmVDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpIHtcclxuXHJcbiAgICAgICAgaWYgKGVsZW1lbnQgJiYgY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gZWxlbWVudC5jbGFzc05hbWUucmVwbGFjZShcclxuICAgICAgICAgICAgICAgIG5ldyBSZWdFeHAoJyhcXFxcc3xeKScgKyBjbGFzc05hbWUgKyAnKFxcXFxzfCQpJyksICcgJ1xyXG4gICAgICAgICAgICApLnRyaW0oKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHBhcnNlSHRtbChodG1sKSB7XHJcblxyXG4gICAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBkaXYuaW5uZXJIVE1MID0gaHRtbC50cmltKCk7XHJcblxyXG4gICAgICAgIHJldHVybiBkaXYuY2hpbGROb2Rlc1swXTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbWF0Y2hlcyhlbCwgc2VsZWN0b3IpIHtcclxuXHJcbiAgICAgICAgcmV0dXJuIChlbC5tYXRjaGVzIHx8IGVsLm1hdGNoZXNTZWxlY3RvciB8fCBlbC5tc01hdGNoZXNTZWxlY3RvcikuY2FsbChlbCwgc2VsZWN0b3IpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRXaW5kb3dIZWlnaHQoKSB7XHJcblxyXG4gICAgICAgIHJldHVybiAnaW5uZXJIZWlnaHQnIGluIHdpbmRvd1xyXG4gICAgICAgICAgICA/IHdpbmRvdy5pbm5lckhlaWdodFxyXG4gICAgICAgICAgICA6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5vZmZzZXRIZWlnaHQ7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIFNpbXBsZUxpZ2h0Ym94KG9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgdGhpcy5pbml0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIFNpbXBsZUxpZ2h0Ym94LmRlZmF1bHRzID0ge1xyXG5cclxuICAgICAgICAvLyBhZGQgY3VzdG9tIGNsYXNzZXMgdG8gbGlnaHRib3ggZWxlbWVudHNcclxuICAgICAgICBlbGVtZW50Q2xhc3M6ICcnLFxyXG4gICAgICAgIGVsZW1lbnRMb2FkaW5nQ2xhc3M6ICdzbGJMb2FkaW5nJyxcclxuICAgICAgICBodG1sQ2xhc3M6ICdzbGJBY3RpdmUnLFxyXG4gICAgICAgIGNsb3NlQnRuQ2xhc3M6ICcnLFxyXG4gICAgICAgIG5leHRCdG5DbGFzczogJycsXHJcbiAgICAgICAgcHJldkJ0bkNsYXNzOiAnJyxcclxuICAgICAgICBsb2FkaW5nVGV4dENsYXNzOiAnJyxcclxuXHJcbiAgICAgICAgLy8gY3VzdG9taXplIC8gbG9jYWxpemUgY29udHJvbHMgY2FwdGlvbnNcclxuICAgICAgICBjbG9zZUJ0bkNhcHRpb246ICdDbG9zZScsXHJcbiAgICAgICAgbmV4dEJ0bkNhcHRpb246ICdOZXh0JyxcclxuICAgICAgICBwcmV2QnRuQ2FwdGlvbjogJ1ByZXZpb3VzJyxcclxuICAgICAgICBsb2FkaW5nQ2FwdGlvbjogJ0xvYWRpbmcuLi4nLFxyXG5cclxuICAgICAgICBiaW5kVG9JdGVtczogdHJ1ZSwgLy8gc2V0IGNsaWNrIGV2ZW50IGhhbmRsZXIgdG8gdHJpZ2dlciBsaWdodGJveCBvbiBwcm92aWRlZCAkaXRlbXNcclxuICAgICAgICBjbG9zZU9uT3ZlcmxheUNsaWNrOiB0cnVlLFxyXG4gICAgICAgIGNsb3NlT25Fc2NhcGVLZXk6IHRydWUsXHJcbiAgICAgICAgbmV4dE9uSW1hZ2VDbGljazogdHJ1ZSxcclxuICAgICAgICBzaG93Q2FwdGlvbnM6IHRydWUsXHJcblxyXG4gICAgICAgIGNhcHRpb25BdHRyaWJ1dGU6ICd0aXRsZScsIC8vIGNob29zZSBkYXRhIHNvdXJjZSBmb3IgbGlicmFyeSB0byBnbGVhbiBpbWFnZSBjYXB0aW9uIGZyb21cclxuICAgICAgICB1cmxBdHRyaWJ1dGU6ICdocmVmJywgLy8gd2hlcmUgdG8gZXhwZWN0IGxhcmdlIGltYWdlXHJcblxyXG4gICAgICAgIHN0YXJ0QXQ6IDAsIC8vIHN0YXJ0IGdhbGxlcnkgYXQgY3VzdG9tIGluZGV4XHJcbiAgICAgICAgbG9hZGluZ1RpbWVvdXQ6IDEwMCwgLy8gdGltZSBhZnRlciBsb2FkaW5nIGVsZW1lbnQgd2lsbCBhcHBlYXJcclxuXHJcbiAgICAgICAgYXBwZW5kVGFyZ2V0OiAnYm9keScsIC8vIGFwcGVuZCBlbHNld2hlcmUgaWYgbmVlZGVkXHJcblxyXG4gICAgICAgIGJlZm9yZVNldENvbnRlbnQ6IG51bGwsIC8vIGNvbnZlbmllbnQgaG9va3MgZm9yIGV4dGVuZGluZyBsaWJyYXJ5IGJlaGF2b2l1clxyXG4gICAgICAgIGJlZm9yZUNsb3NlOiBudWxsLFxyXG4gICAgICAgIGFmdGVyQ2xvc2U6IG51bGwsXHJcbiAgICAgICAgYmVmb3JlRGVzdHJveTogbnVsbCxcclxuICAgICAgICBhZnRlckRlc3Ryb3k6IG51bGwsXHJcblx0XHR2aWRlb1JlZ2V4OiBuZXcgUmVnRXhwKC95b3V0dWJlLmNvbXx5b3V0dS5iZXx2aW1lby5jb20vKSAvLyByZWdleCB3aGljaCB0ZXN0cyBsb2FkIHVybCBmb3IgaWZyYW1lIGNvbnRlbnRcclxuXHJcbiAgICB9O1xyXG5cclxuICAgIGFzc2lnbihTaW1wbGVMaWdodGJveC5wcm90b3R5cGUsIHtcclxuXHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24ob3B0aW9ucykge1xyXG5cclxuICAgICAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyA9IGFzc2lnbih7fSwgU2ltcGxlTGlnaHRib3guZGVmYXVsdHMsIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgZWxlbWVudHM7XHJcblxyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy4kaXRlbXMpIHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnRzID0gb3B0aW9ucy4kaXRlbXMuZ2V0KCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmVsZW1lbnRzKSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50cyA9IFtdLnNsaWNlLmNhbGwoXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIG9wdGlvbnMuZWxlbWVudHMgPT09ICdzdHJpbmcnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChvcHRpb25zLmVsZW1lbnRzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG9wdGlvbnMuZWxlbWVudHNcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuZXZlbnRSZWdpc3RyeSA9IHtsaWdodGJveDogW10sIHRodW1ibmFpbHM6IFtdfTtcclxuICAgICAgICAgICAgdGhpcy5pdGVtcyA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLmNhcHRpb25zID0gW107XHJcblxyXG4gICAgICAgICAgICBpZiAoZWxlbWVudHMpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBlbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uKGVsZW1lbnQsIGluZGV4KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuaXRlbXMucHVzaChlbGVtZW50LmdldEF0dHJpYnV0ZShvcHRpb25zLnVybEF0dHJpYnV0ZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY2FwdGlvbnMucHVzaChlbGVtZW50LmdldEF0dHJpYnV0ZShvcHRpb25zLmNhcHRpb25BdHRyaWJ1dGUpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuYmluZFRvSXRlbXMpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYWRkRXZlbnQoZWxlbWVudCwgJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2hvd1Bvc2l0aW9uKGluZGV4KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sICd0aHVtYm5haWxzJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLml0ZW1zKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1zID0gb3B0aW9ucy5pdGVtcztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuY2FwdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FwdGlvbnMgPSBvcHRpb25zLmNhcHRpb25zO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGFkZEV2ZW50OiBmdW5jdGlvbihlbGVtZW50LCBldmVudE5hbWUsIGNhbGxiYWNrLCBzY29wZSkge1xyXG5cclxuICAgICAgICAgICAgdGhpcy5ldmVudFJlZ2lzdHJ5W3Njb3BlIHx8ICdsaWdodGJveCddLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudDogZWxlbWVudCxcclxuICAgICAgICAgICAgICAgIGV2ZW50TmFtZTogZXZlbnROYW1lLFxyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgY2FsbGJhY2spO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHJlbW92ZUV2ZW50czogZnVuY3Rpb24oc2NvcGUpIHtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZXZlbnRSZWdpc3RyeVtzY29wZV0uZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICBpdGVtLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihpdGVtLmV2ZW50TmFtZSwgaXRlbS5jYWxsYmFjayk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5ldmVudFJlZ2lzdHJ5W3Njb3BlXSA9IFtdO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2hvd1Bvc2l0aW9uKHRoaXMuY3VycmVudFBvc2l0aW9uICsgMSk7XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHByZXY6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2hvd1Bvc2l0aW9uKHRoaXMuY3VycmVudFBvc2l0aW9uIC0gMSk7XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG5vcm1hbGl6ZVBvc2l0aW9uOiBmdW5jdGlvbihwb3NpdGlvbikge1xyXG5cclxuICAgICAgICAgICAgaWYgKHBvc2l0aW9uID49IHRoaXMuaXRlbXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IDA7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPCAwKSB7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IHRoaXMuaXRlbXMubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHBvc2l0aW9uO1xyXG5cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzaG93UG9zaXRpb246IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgbmV3UG9zaXRpb24gPSB0aGlzLm5vcm1hbGl6ZVBvc2l0aW9uKHBvc2l0aW9uKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5jdXJyZW50UG9zaXRpb24gIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpcmVjdGlvbiA9IG5ld1Bvc2l0aW9uID4gdGhpcy5jdXJyZW50UG9zaXRpb24gPyAnbmV4dCcgOiAncHJldic7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFBvc2l0aW9uID0gbmV3UG9zaXRpb247XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXR1cExpZ2h0Ym94SHRtbCgpXHJcbiAgICAgICAgICAgICAgICAucHJlcGFyZUl0ZW0odGhpcy5jdXJyZW50UG9zaXRpb24sIHRoaXMuc2V0Q29udGVudClcclxuICAgICAgICAgICAgICAgIC5zaG93KCk7XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGxvYWRpbmc6IGZ1bmN0aW9uKG9uKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xyXG5cclxuICAgICAgICAgICAgaWYgKG9uKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkaW5nVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGFkZENsYXNzKHNlbGYuJGVsLCBvcHRpb25zLmVsZW1lbnRMb2FkaW5nQ2xhc3MpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzZWxmLiRjb250ZW50LmlubmVySFRNTCA9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8cCBjbGFzcz1cInNsYkxvYWRpbmdUZXh0ICcgKyBvcHRpb25zLmxvYWRpbmdUZXh0Q2xhc3MgKyAnXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmxvYWRpbmdDYXB0aW9uICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzwvcD4nO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc2hvdygpO1xyXG5cclxuICAgICAgICAgICAgICAgIH0sIG9wdGlvbnMubG9hZGluZ1RpbWVvdXQpO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyh0aGlzLiRlbCwgb3B0aW9ucy5lbGVtZW50TG9hZGluZ0NsYXNzKTtcclxuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmxvYWRpbmdUaW1lb3V0KTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSxcclxuXHRcdGdldFZpZGVvVVJMOiBmdW5jdGlvbiggdXJsICkge1xyXG5cdFx0XHR2YXIgZnJtID0gJy8vX1VSTF8nO1xyXG5cdFx0XHR2YXIgY29udmVydHMgPSBbXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0cng6IC9eKD86aHR0cHM/Oik/XFwvXFwvKD86d3d3XFwuKT92aW1lb1xcLmNvbVxcLyhbXlxcPyZcIl0rKS4qJC9nLFxyXG5cdFx0XHRcdFx0dG1wbDogZnJtLnJlcGxhY2UoJ19VUkxfJyxcInBsYXllci52aW1lby5jb20vdmlkZW8vJDFcIilcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHJ4OiAvXi4qKD86aHR0cHM/OlxcL1xcLyk/KD86d3d3XFwuKT8oPzp5b3V0dWJlXFwuY29tfHlvdXR1XFwuYmUpXFwvKD86d2F0Y2hcXD92PXxlbWJlZFxcL3x2XFwvfHVzZXJcXC8uK1xcLyk/KFteXFw/JlwiXSspLiokL2csXHJcblx0XHRcdFx0XHR0bXBsOiBmcm0ucmVwbGFjZSgnX1VSTF8nLFwid3d3LnlvdXR1YmUuY29tL2VtYmVkLyQxXCIpXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRyeDogL14uKig/Omh0dHBzPzpcXC9cXC8pPyg/Ond3d1xcLik/KD86eW91dHViZS1ub2Nvb2tpZVxcLmNvbSlcXC8oPzp3YXRjaFxcP3Y9fGVtYmVkXFwvfHZcXC98dXNlclxcLy4rXFwvKT8oW15cXD8mXCJdKykuKiQvZyxcclxuXHRcdFx0XHRcdHRtcGw6IGZybS5yZXBsYWNlKCdfVVJMXycsXCJ3d3cueW91dHViZS1ub2Nvb2tpZS5jb20vZW1iZWQvJDFcIilcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRdO1xyXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGNvbnZlcnRzLmxlbmd0aDsgaSsrICkge1xyXG5cdFx0XHRcdGlmIChjb252ZXJ0c1tpXS5yeC50ZXN0KHVybCkpIHtcclxuXHRcdFx0XHRcdHJldHVybiB1cmwucmVwbGFjZShjb252ZXJ0c1tpXS5yeCwgY29udmVydHNbaV0udG1wbCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiB1cmw7XHJcblx0XHR9LFxyXG4gICAgICAgIHByZXBhcmVJdGVtOiBmdW5jdGlvbihwb3NpdGlvbiwgY2FsbGJhY2spIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgdmFyIHVybCA9IHRoaXMuaXRlbXNbcG9zaXRpb25dO1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRpbmcodHJ1ZSk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMudmlkZW9SZWdleC50ZXN0KHVybCkpIHtcclxuXHRcdFx0XHR2YXIgdmlkZW9VUkwgPSB0aGlzLmdldFZpZGVvVVJMKHVybCk7XHJcblx0XHRcdFx0Y2FsbGJhY2suY2FsbChzZWxmLCBwYXJzZUh0bWwoXHJcblx0XHRcdFx0XHQnPGRpdiBjbGFzcz1cInNsYklmcmFtZUNvbnRcIj48aWZyYW1lIGNsYXNzPVwic2xiSWZyYW1lXCIgZnJhbWVib3JkZXI9XCIwXCIgYWxsb3dmdWxsc2NyZWVuIHNyYz1cIicgKyB2aWRlb1VSTCArICdcIj48L2lmcmFtZT48L2Rpdj4nKVxyXG5cdFx0XHRcdCk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciAkaW1hZ2VDb250ID0gcGFyc2VIdG1sKFxyXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2xiSW1hZ2VXcmFwXCI+PGltZyBjbGFzcz1cInNsYkltYWdlXCIgc3JjPVwiJyArIHVybCArICdcIiAvPjwvZGl2PidcclxuICAgICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy4kY3VycmVudEltYWdlID0gJGltYWdlQ29udC5xdWVyeVNlbGVjdG9yKCcuc2xiSW1hZ2UnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNob3dDYXB0aW9ucyAmJiB0aGlzLmNhcHRpb25zW3Bvc2l0aW9uXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRpbWFnZUNvbnQuYXBwZW5kQ2hpbGQocGFyc2VIdG1sKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNsYkNhcHRpb25cIj4nICsgdGhpcy5jYXB0aW9uc1twb3NpdGlvbl0gKyAnPC9kaXY+JylcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMubG9hZEltYWdlKHVybCwgZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc2V0SW1hZ2VEaW1lbnNpb25zKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoc2VsZiwgJGltYWdlQ29udCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYubG9hZEltYWdlKHNlbGYuaXRlbXNbc2VsZi5ub3JtYWxpemVQb3NpdGlvbihzZWxmLmN1cnJlbnRQb3NpdGlvbiArIDEpXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgbG9hZEltYWdlOiBmdW5jdGlvbih1cmwsIGNhbGxiYWNrKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy52aWRlb1JlZ2V4LnRlc3QodXJsKSkge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBpbWFnZSA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgJiYgKGltYWdlLm9ubG9hZCA9IGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgIGltYWdlLnNyYyA9IHVybDtcclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2V0dXBMaWdodGJveEh0bWw6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgdmFyIG8gPSB0aGlzLm9wdGlvbnM7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXRoaXMuJGVsKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy4kZWwgPSBwYXJzZUh0bWwoXHJcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzbGJFbGVtZW50ICcgKyBvLmVsZW1lbnRDbGFzcyArICdcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzbGJPdmVybGF5XCI+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2xiV3JhcE91dGVyXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNsYldyYXBcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNsYkNvbnRlbnRPdXRlclwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNsYkNvbnRlbnRcIj48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIHRpdGxlPVwiJyArIG8uY2xvc2VCdG5DYXB0aW9uICsgJ1wiIGNsYXNzPVwic2xiQ2xvc2VCdG4gJyArIG8uY2xvc2VCdG5DbGFzcyArICdcIj7DlzwvYnV0dG9uPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5pdGVtcy5sZW5ndGggPiAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICc8ZGl2IGNsYXNzPVwic2xiQXJyb3dzXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiB0aXRsZT1cIicgKyBvLnByZXZCdG5DYXB0aW9uICsgJ1wiIGNsYXNzPVwicHJldiBzbGJBcnJvdycgKyBvLnByZXZCdG5DbGFzcyArICdcIj4nICsgby5wcmV2QnRuQ2FwdGlvbiArICc8L2J1dHRvbj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIHRpdGxlPVwiJyArIG8ubmV4dEJ0bkNhcHRpb24gKyAnXCIgY2xhc3M9XCJuZXh0IHNsYkFycm93JyArIG8ubmV4dEJ0bkNsYXNzICsgJ1wiPicgKyBvLm5leHRCdG5DYXB0aW9uICsgJzwvYnV0dG9uPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPC9kaXY+J1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPC9kaXY+J1xyXG4gICAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLiRjb250ZW50ID0gdGhpcy4kZWwucXVlcnlTZWxlY3RvcignLnNsYkNvbnRlbnQnKTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuJGNvbnRlbnQuaW5uZXJIVE1MID0gJyc7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2hvdzogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXRoaXMubW9kYWxJbkRvbSkge1xyXG5cclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5vcHRpb25zLmFwcGVuZFRhcmdldCkuYXBwZW5kQ2hpbGQodGhpcy4kZWwpO1xyXG4gICAgICAgICAgICAgICAgYWRkQ2xhc3MoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCB0aGlzLm9wdGlvbnMuaHRtbENsYXNzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0dXBMaWdodGJveEV2ZW50cygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tb2RhbEluRG9tID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG5cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzZXRDb250ZW50OiBmdW5jdGlvbihjb250ZW50KSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgJGNvbnRlbnQgPSB0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZydcclxuICAgICAgICAgICAgICAgID8gcGFyc2VIdG1sKGNvbnRlbnQpXHJcbiAgICAgICAgICAgICAgICA6IGNvbnRlbnRcclxuICAgICAgICAgICAgO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5sb2FkaW5nKGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuc2V0dXBMaWdodGJveEh0bWwoKTtcclxuXHJcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzKHRoaXMuJGNvbnRlbnQsICdzbGJEaXJlY3Rpb25OZXh0Jyk7XHJcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzKHRoaXMuJGNvbnRlbnQsICdzbGJEaXJlY3Rpb25QcmV2Jyk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5kaXJlY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgIGFkZENsYXNzKHRoaXMuJGNvbnRlbnQsIHRoaXMuZGlyZWN0aW9uID09PSAnbmV4dCdcclxuICAgICAgICAgICAgICAgICAgICA/ICdzbGJEaXJlY3Rpb25OZXh0J1xyXG4gICAgICAgICAgICAgICAgICAgIDogJ3NsYkRpcmVjdGlvblByZXYnXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmJlZm9yZVNldENvbnRlbnQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5iZWZvcmVTZXRDb250ZW50KCRjb250ZW50LCB0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy4kY29udGVudC5hcHBlbmRDaGlsZCgkY29udGVudCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2V0SW1hZ2VEaW1lbnNpb25zOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLiRjdXJyZW50SW1hZ2UpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGN1cnJlbnRJbWFnZS5zdHlsZS5tYXhIZWlnaHQgPSBnZXRXaW5kb3dIZWlnaHQoKSArICdweCc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2V0dXBMaWdodGJveEV2ZW50czogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5ldmVudFJlZ2lzdHJ5LmxpZ2h0Ym94Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuYWRkRXZlbnQodGhpcy4kZWwsICdjbGljaycsIGZ1bmN0aW9uKGUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgJHRhcmdldCA9IGUudGFyZ2V0O1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChtYXRjaGVzKCR0YXJnZXQsICcuc2xiQ2xvc2VCdG4nKSB8fCAoc2VsZi5vcHRpb25zLmNsb3NlT25PdmVybGF5Q2xpY2sgJiYgbWF0Y2hlcygkdGFyZ2V0LCAnLnNsYldyYXAnKSkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jbG9zZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2hlcygkdGFyZ2V0LCAnLnNsYkFycm93JykpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcygkdGFyZ2V0LCAnLm5leHQnKSA/IHNlbGYubmV4dCgpIDogc2VsZi5wcmV2KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzZWxmLm9wdGlvbnMubmV4dE9uSW1hZ2VDbGljayAmJiBzZWxmLml0ZW1zLmxlbmd0aCA+IDEgJiYgbWF0Y2hlcygkdGFyZ2V0LCAnLnNsYkltYWdlJykpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5uZXh0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSkuYWRkRXZlbnQoZG9jdW1lbnQsICdrZXl1cCcsIGZ1bmN0aW9uKGUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBzZWxmLm9wdGlvbnMuY2xvc2VPbkVzY2FwZUtleSAmJiBlLmtleUNvZGUgPT09IDI3ICYmIHNlbGYuY2xvc2UoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5pdGVtcy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgKGUua2V5Q29kZSA9PT0gMzkgfHwgZS5rZXlDb2RlID09PSA2OCkgJiYgc2VsZi5uZXh0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgKGUua2V5Q29kZSA9PT0gMzcgfHwgZS5rZXlDb2RlID09PSA2NSkgJiYgc2VsZi5wcmV2KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9KS5hZGRFdmVudCh3aW5kb3csICdyZXNpemUnLCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBzZWxmLnNldEltYWdlRGltZW5zaW9ucygpO1xyXG5cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgY2xvc2U6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMubW9kYWxJbkRvbSkge1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMucnVuSG9vaygnYmVmb3JlQ2xvc2UnKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlRXZlbnRzKCdsaWdodGJveCcpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kZWwgJiYgdGhpcy4kZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLiRlbCk7XHJcbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHRoaXMub3B0aW9ucy5odG1sQ2xhc3MpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tb2RhbEluRG9tID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJ1bkhvb2soJ2FmdGVyQ2xvc2UnKTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuZGlyZWN0aW9uID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRQb3NpdGlvbiA9IHRoaXMub3B0aW9ucy5zdGFydEF0O1xyXG5cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgICAgICAgdGhpcy5ydW5Ib29rKCdiZWZvcmVEZXN0cm95Jyk7XHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlRXZlbnRzKCd0aHVtYm5haWxzJyk7XHJcbiAgICAgICAgICAgIHRoaXMucnVuSG9vaygnYWZ0ZXJEZXN0cm95Jyk7XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHJ1bkhvb2s6IGZ1bmN0aW9uKG5hbWUpIHtcclxuXHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9uc1tuYW1lXSAmJiB0aGlzLm9wdGlvbnNbbmFtZV0odGhpcyk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9KTtcclxuXHJcbiAgICBTaW1wbGVMaWdodGJveC5vcGVuID0gZnVuY3Rpb24ob3B0aW9ucykge1xyXG5cclxuICAgICAgICB2YXIgaW5zdGFuY2UgPSBuZXcgU2ltcGxlTGlnaHRib3gob3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHJldHVybiBvcHRpb25zLmNvbnRlbnRcclxuICAgICAgICAgICAgPyBpbnN0YW5jZS5zZXRDb250ZW50KG9wdGlvbnMuY29udGVudCkuc2hvdygpXHJcbiAgICAgICAgICAgIDogaW5zdGFuY2Uuc2hvd1Bvc2l0aW9uKGluc3RhbmNlLm9wdGlvbnMuc3RhcnRBdCk7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBTaW1wbGVMaWdodGJveC5yZWdpc3RlckFzSnF1ZXJ5UGx1Z2luID0gZnVuY3Rpb24oJCkge1xyXG5cclxuICAgICAgICAkLmZuLnNpbXBsZUxpZ2h0Ym94ID0gZnVuY3Rpb24ob3B0aW9ucykge1xyXG5cclxuICAgICAgICAgICAgdmFyIGxpZ2h0Ym94SW5zdGFuY2U7XHJcbiAgICAgICAgICAgIHZhciAkaXRlbXMgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGlmICghJC5kYXRhKHRoaXMsICdzaW1wbGVMaWdodGJveCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGlnaHRib3hJbnN0YW5jZSA9IGxpZ2h0Ym94SW5zdGFuY2UgfHwgbmV3IFNpbXBsZUxpZ2h0Ym94KCQuZXh0ZW5kKHt9LCBvcHRpb25zLCB7JGl0ZW1zOiAkaXRlbXN9KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJC5kYXRhKHRoaXMsICdzaW1wbGVMaWdodGJveCcsIGxpZ2h0Ym94SW5zdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJC5TaW1wbGVMaWdodGJveCA9IFNpbXBsZUxpZ2h0Ym94O1xyXG5cclxuICAgIH07XHJcblxyXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5qUXVlcnkpIHtcclxuICAgICAgICBTaW1wbGVMaWdodGJveC5yZWdpc3RlckFzSnF1ZXJ5UGx1Z2luKHdpbmRvdy5qUXVlcnkpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBTaW1wbGVMaWdodGJveDtcclxuXHJcbn0pKTsiXX0=